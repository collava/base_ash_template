name: Elixir Validations
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
env:
  MIX_ENV: test
permissions:
  contents: read
jobs:
  build:
    name: Test on OTP ${{matrix.otp}} / Elixir ${{matrix.elixir}}
    strategy:
      # Specify the OTP and Elixir versions to use when building
      # and running the workflow steps.
      matrix:
        otp: ["27.2"]
        elixir: ["1.17.3-otp-27"]
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ash_base_template_test
        ports:
          - "5432:5432"
        options: "--health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5"

    steps:
      - uses: actions/checkout@v4
      - name: Set up Elixir
        uses: erlef/setup-beam@e5b66193a0ae8fd3e4c0296f0c7a1c7d36241444
        with:
          elixir-version: ${{matrix.elixir}}
          otp-version: ${{matrix.otp}}

      - name: Restore PLT cache
        id: plt_cache
        uses: actions/cache/restore@v4
        with:
          key: |
            plt-${{ runner.os }}-${{matrix.otp}}-${{matrix.elixir}}-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            plt-${{ runner.os }}-${{matrix.otp}}-${{matrix.elixir}}-
          path: |
            priv/plts


      - name: Restore dependencies cache
        id: cache-deps-restore
        env:
          cache-name: cache-elixir-deps
        uses: actions/cache/restore@v4
        with:
          key: ${{ runner.os }}-mix-${{ env.cache-name }}-${{ hashFiles('**/mix.lock') }}
          path: deps

      - name: Save dependencies cache
        id: cache-deps-save
        uses: actions/cache/save@v4
        if: always() && steps.cache-deps-restore.outputs.cache-hit != 'true'
        with:
          key: ${{ steps.cache-deps-restore.outputs.cache-primary-key }}
          path: deps

      # Step: Define how to cache the `_build` directory. After the first run,
      # this speeds up tests runs a lot. This includes not re-compiling our
      # project's downloaded deps every run.
      - name: Restore cache compiled build
        id: cache-build-restore
        uses: actions/cache/restore@v4
        env:
          cache-name: cache-compiled-build
        with:
          key: ${{ runner.os }}-mix-${{ env.cache-name }}-${{ hashFiles('**/mix.lock') }}
          path: _build

      - name: Save cache compiled build
        id: cache-build-save
        uses: actions/cache/save@v4
        if: always() && steps.cache-build-restore.outputs.cache-hit != 'true'
        with:
          key: ${{ steps.cache-build-restore.outputs.cache-primary-key }}
          path: _build

      # Step: Download project dependencies. If unchanged, uses
      # the cached version.
      - name: Install dependencies
        run: mix deps.get
      - name: Install tailwind for blog
        run:  mix tailwind.install

      # Create PLTs if no cache was found, it uses the id from the Restore PLT cache
      - name: Create PLTs
        if: steps.plt_cache.outputs.cache-hit != 'true'
        run: mix dialyzer --plt

      # Create the PLTS directory if it doesn't exist
      - name: Create dir
        run: |
          if [ ! -d "priv/plts" ]; then
            mkdir priv/plts
          fi

      # By default, the GitHub Cache action will only save the cache if all steps in the job succeed,
      # so we separate the cache restore and save steps in case running dialyzer fails.
      - name: Save PLT cache
        id: plt_cache_save
        uses: actions/cache/save@v4
        if: steps.plt_cache.outputs.cache-hit != 'true'
        with:
          key: |
            plt-${{ runner.os }}-${{matrix.otp}}-${{matrix.elixir}}-${{ hashFiles('**/mix.lock') }}
          path: |
            priv/plts

      # Step: Compile the project treating any warnings as errors.
      # Customize this step if a different behavior is desired.
      - name: Mix Compile
        run: mix compile --warnings-as-errors

      # Step: Check that the checked in code has already been formatted.
      # This step fails if something was found unformatted.
      # Customize this step as desired.
      - name: Check Formatting
        run: mix format --check-formatted
      - name: Run Dialyzer
        env:
          MIX_ENV: dev
        run: mix dialyzer --format github
      - name: Check unused dependencies
        run: mix deps.unlock --check-unused
      - name: Run CREDO
        run: mix credo --strict
      - name: Run Sobelow
        run: mix sobelow --config
      - name: Run COVERALLS
        run: mix coveralls.json
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
      # Step: Conditionally bust the cache when job is re-run.
      # Sometimes, we may have issues with incremental builds that are fixed by
      # doing a full recompile. In order to not waste dev time on such trivial
      # issues (while also reaping the time savings of incremental builds for
      # *most* day-to-day development), force a full recompile only on builds
      # that are retried.
      - name: Clean to rule out incremental build as a source of flakiness
        if: github.run_attempt != '1'
        run: |
          mix deps.clean --all
          mix clean
        shell: sh
